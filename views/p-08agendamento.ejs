<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agende Sua Consulta | PetClinic</title>
    <link rel="stylesheet" href="/style/main.css">
    <link rel="stylesheet" href="/style/vlibras.css">
    <link rel="icon" href="/img/PatClinic.png">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/style/style08.css">
    <script src="/js/vlibras.js"></script>    
</head>

<body>    
    <header>
        <nav class="navbar">
            <div class="logo-header">
                <a href="/"><img src="../img/PatClinic.png" alt="Logo da Pata Clinic"></a>
            </div>
    
            <ul class="nav-links">
                <li><a href="/">Início</a></li>
                <li><a href="/perfil">Animais Cadastrados</a></li>
                <li><a href="#contact">Contato</a></li>

            </ul>
            
            <div class="nav-actions">
                <a href="/perfil"> 
                    <span class="btn-login"><i class='bx bxs-user'></i></span>
                     <span class="perfil-ho">
                        <i class='bx bxs-user-circle'></i>
                    </span> Perfil 
                </a>

                <a href="/cadastrarAnimal" class="btn-signup">Cadastrar Animal🐈</a>
            </div>
            <button class="nav-toggle" aria-label="Abrir Menu">
                <span class="hamburger"></span>
            </button>

        </nav>

    </header>

    <main>
        <div class="main-container">
            <div class="container-photo"></div>
            <h2>Agende sua consulta!</h2>
            <p><i class='bx bx-map'></i> Rua Dom Pedro II, 1940 - São Paulo, SP</p>
            
            <div id="alertSuccess" class="alert alert-success" role="alert"></div>
            <div id="alertError" class="alert alert-danger" role="alert"></div>

            <form id="formAgendamento" class="container inputs">
                <div class="mb-3">
                    <label for="especialidade" class="form-label">Selecione uma Especialidade</label>
                    <select class="form-select" id="especialidade" required>
                        <option value="">Escolher Especialidade</option>
                        <option value="Castração">Castração</option>
                        <option value="Vacinação">Vacinação</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="selectAnimal" class="form-label">Selecione um Animal</label>
                    <select class="form-select" id="selectAnimal" required>
                        <option value="">Escolher Animal</option>
                        <!-- Animais serão carregados via JavaScript -->
                    </select>
                </div>

                <div class="mb-3">
                    <label for="dataConsulta" class="form-label">Selecione uma Data</label>
                    <input type="date" class="form-control" id="dataConsulta" required>
                </div>

                <div class="mb-3">
                    <label for="horario" class="form-label">Selecione um Horário</label>
                    <select class="form-select" id="horario" required>
                        <option value="">Escolher Horário</option>
                        <option value="09:00">09:00</option>
                        <option value="10:00">10:00</option>
                        <option value="11:00">11:00</option>
                        <option value="13:00">13:00</option>
                        <option value="14:00">14:00</option>
                        <option value="15:00">15:00</option>
                        <option value="16:00">16:00</option>
                    </select>
                </div>

                <div class="d-grid gap-2">
                    <button class="btn btn-primary" type="submit">
                        Confirmar
                        <span class="loading-spinner"></span>
                    </button>
                </div>
            </form>            
        </div>
        <div class="container mt-5">
            <h3>Meus Agendamentos</h3>
            <div id="listaAgendamentos" class="row">
                <!-- Os agendamentos serão inseridos aqui via JavaScript -->
            </div>
            <div class="mt-4">
                <button class="btn btn-secondary" onclick="toggleCancelados()">
                    Ver Consultas Canceladas
                    <span id="totalCancelados" class="badge bg-danger ms-2">0</span>
                </button>
            </div>
            <div id="listaCancelados" class="row mt-3" style="display: none;">
                <h4>Consultas Canceladas</h4>
                <!-- Os agendamentos cancelados serão inseridos aqui via JavaScript -->
            </div>
        </div>
    </main>        

    <footer class="footer">
        <div class="footer-container">
          <div class="footer-about">
            <section id="about">
                <h3>Pataclinic</h3>
            </section>
            <p>Comprometidos com o bem-estar dos seus pets, oferecendo serviços gratuitos de castração e vacinação.</p>
          </div>
      
          <div class="footer-contact">
            <section id="contact">
              <h4>Contato</h4>
            </section>
            <p><strong>Email:</strong> contato@pataclinic.com.br</p>
            <p><strong>Telefone:</strong> (11) 1234-5678</p>
            <p><strong>Endereço:</strong> Rua dos Pets, 123 - São Paulo, SP</p>
          </div>
      
          <div class="footer-social">
            <h4>Siga-nos</h4>
            <a href="https://www.facebook.com/" class="social-link" target="_blank">Facebook</a>
            <a href="https://www.instagram.com/" class="social-link" target="_blank">Instagram</a>
            <a href="https://www.whatsapp.com/" class="social-link" target="_blank">WhatsApp</a>
          </div>
        </div>
        <div class="footer-bottom">
          <p>&copy; 2024 Pataclinic. Todos os direitos reservados.</p>
        </div>
    </footer>
    <script src="/js/index.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('formAgendamento');
            const selectAnimal = document.getElementById('selectAnimal');
            const alertSuccess = document.getElementById('alertSuccess');
            const alertError = document.getElementById('alertError');
            const dataConsulta = document.getElementById('dataConsulta');
            
            // Definir data mínima como hoje
            const hoje = new Date().toISOString().split('T')[0];
            dataConsulta.min = hoje;
        
            // Carregar animais do usuário
            async function carregarAnimais() {
                try {
                    const response = await fetch('/user/animais');
                    if (!response.ok) throw new Error('Erro ao carregar animais');
                    
                    const animais = await response.json();
                    selectAnimal.innerHTML = '<option value="">Escolher Animal</option>';
                    
                    animais.forEach(animal => {
                        const option = document.createElement('option');
                        option.value = animal._id;
                        option.textContent = `${animal.nome} - ${animal.raca}`;
                        selectAnimal.appendChild(option);
                    });
                } catch (error) {
                    mostrarErro('Erro ao carregar seus animais. Por favor, recarregue a página.');
                }
            }
        
            function mostrarSucesso(mensagem) {
                alertSuccess.textContent = mensagem;
                alertSuccess.style.display = 'block';
                alertError.style.display = 'none';
                setTimeout(() => alertSuccess.style.display = 'none', 5000);
            }
        
            function mostrarErro(mensagem) {
                alertError.textContent = mensagem;
                alertError.style.display = 'block';
                alertSuccess.style.display = 'none';
                setTimeout(() => alertError.style.display = 'none', 5000);
            }
        
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const especialidade = document.getElementById('especialidade').value;
                const animalId = selectAnimal.value;
                const data = dataConsulta.value;
                const horario = document.getElementById('horario').value;
        
                if (!especialidade || !animalId || !data || !horario) {
                    mostrarErro('Por favor, preencha todos os campos');
                    return;
                }
        
                // Validar data
                const dataAgendamento = new Date(`${data}T${horario}`);
                if (dataAgendamento < new Date()) {
                    mostrarErro('Selecione uma data e horário futuros');
                    return;
                }
        
                // Desabilitar form durante o envio
                form.classList.add('form-loading');
                document.querySelector('.loading-spinner').style.display = 'inline-block';
        
                try {
                    const response = await fetch('/agendamentos/agendar', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            nomeAnimal: animalId,
                            dataAgendamento: dataAgendamento.toISOString(),
                            especialidade,
                        })
                    });
        
                    const responseData = await response.json();
                    
                    if (response.ok) {
                        mostrarSucesso('Consulta agendada com sucesso!');
                        form.reset();
                        // Atualizar a lista de agendamentos imediatamente após o sucesso
                        await carregarAgendamentos();
                    } else {
                        mostrarErro(responseData.message || 'Erro ao agendar consulta');
                    }
                } catch (error) {
                    mostrarErro('Erro ao processar agendamento. Tente novamente.');
                } finally {
                    form.classList.remove('form-loading');
                    document.querySelector('.loading-spinner').style.display = 'none';
                }
            });
        
            // Carregar dados iniciais
            carregarAnimais();
            carregarAgendamentos();
        });

        let canceladosVisiveis = false;

        function toggleCancelados() {
            const listaCancelados = document.getElementById('listaCancelados');
            canceladosVisiveis = !canceladosVisiveis;
            listaCancelados.style.display = canceladosVisiveis ? 'block' : 'none';
            
            // Atualizar texto do botão
            const btn = document.querySelector('button[onclick="toggleCancelados()"]');
            btn.textContent = canceladosVisiveis ? 'Ocultar Consultas Canceladas' : 'Ver Consultas Canceladas';
        }
        
        async function carregarAgendamentos() {
            try {
                const response = await fetch('/agendamentos/meus-agendamentos');
                if (!response.ok) throw new Error('Erro ao carregar agendamentos');
        
                const { agendamentos, agendamentosCancelados, totalAgendamentos } = await response.json();
        
                const container = document.getElementById('listaAgendamentos');
                container.innerHTML = '';
        
                if (!Array.isArray(agendamentos) || agendamentos.length === 0) {
                    container.innerHTML = '<div class="col-12"><p>Você não possui agendamentos.</p></div>';
                    return;
                }
        
                // Ordenar agendamentos por data
                agendamentos.sort((a, b) => new Date(a.dataAgendamento) - new Date(b.dataAgendamento));
        
                const hoje = new Date();
                hoje.setHours(0, 0, 0, 0);
        
                // Arrays para separar agendamentos
                const agendamentosHoje = [];
                const agendamentosFuturos = [];
        
                // Classificar agendamentos em hoje e futuros
                agendamentos.forEach(agendamento => {
                    const dataAgendamento = new Date(agendamento.dataAgendamento);
                    const dataAgendamentoInicio = new Date(dataAgendamento);
                    dataAgendamentoInicio.setHours(0, 0, 0, 0);
        
                    if (dataAgendamentoInicio.getTime() === hoje.getTime()) {
                        agendamentosHoje.push(agendamento);
                    } else if (dataAgendamento > hoje) {
                        agendamentosFuturos.push(agendamento);
                    }
                });
        
                // Containers para categorias
                const containerHoje = document.createElement('div');
                containerHoje.className = 'col-12';
                containerHoje.innerHTML = `<h4 class="mt-4 mb-3">Agendamentos de Hoje (${agendamentosHoje.length})</h4>`;
                const gridHoje = document.createElement('div');
                gridHoje.className = 'row row-cols-1 row-cols-md-2 g-4';
                containerHoje.appendChild(gridHoje);
        
                const containerFuturos = document.createElement('div');
                containerFuturos.className = 'col-12';
                containerFuturos.innerHTML = `<h4 class="mt-4 mb-3">Próximos Agendamentos (${agendamentosFuturos.length})</h4>`;
                const gridFuturos = document.createElement('div');
                gridFuturos.className = 'row row-cols-1 row-cols-md-2 g-4';
                containerFuturos.appendChild(gridFuturos);
        
                // Processar agendamentos de hoje
                agendamentosHoje.forEach(agendamento => {
                    const card = criarCardAgendamento(agendamento);
                    gridHoje.appendChild(card);
                });
        
                // Processar agendamentos futuros
                agendamentosFuturos.forEach(agendamento => {
                    const card = criarCardAgendamento(agendamento);
                    gridFuturos.appendChild(card);
                });
        
                // Limpar e adicionar seções ao container principal
                container.innerHTML = '';
                if (agendamentosHoje.length > 0) container.appendChild(containerHoje);
                if (agendamentosFuturos.length > 0) container.appendChild(containerFuturos);
        
                // Se nenhuma categoria tiver agendamentos
                if (agendamentosHoje.length === 0 && agendamentosFuturos.length === 0) {
                    container.innerHTML = '<div class="col-12"><p>Você não possui agendamentos.</p></div>';
                }
        
                // Atualizar contador de cancelados
                document.getElementById('totalCancelados').textContent = agendamentosCancelados.length;

                const containerCancelados = document.getElementById('listaCancelados');
                containerCancelados.innerHTML = '<h4>Consultas Canceladas</h4>';
        
                if (agendamentosCancelados.length === 0) {
                    containerCancelados.innerHTML += '<div class="col-12"><p>Não há consultas canceladas.</p></div>';
                } else {
                    const gridCancelados = document.createElement('div');
                    gridCancelados.className = 'row row-cols-1 row-cols-md-2 g-4';
        
                    agendamentosCancelados.forEach(agendamento => {
                        const dataAgendamento = new Date(agendamento.dataAgendamento);
                        const data = dataAgendamento.toLocaleDateString();
                        const hora = dataAgendamento.toLocaleTimeString().slice(0, 5);
        
                        const card = document.createElement('div');
                        card.className = 'col';
                        card.innerHTML = `
                            <div class="agendamento-card cancelado h-100">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h5 class="mb-0">Consulta com ${agendamento.nomeMedico}</h5>
                                    <span class="status-badge status-cancelado">Cancelado</span>
                                </div>
                                <p class="mb-2">Animal: ${agendamento.nomeAnimal.nome}</p>
                                <p class="mb-2">Especialidade: ${agendamento.especialidade}</p>
                                <p class="mb-2">Data: ${data} às ${hora}</p>
                            </div>
                        `;
                        gridCancelados.appendChild(card);
                    });
        
                    containerCancelados.appendChild(gridCancelados);
                }

                function criarCardAgendamento(agendamento) {
                    const dataAgendamento = new Date(agendamento.dataAgendamento);
                    const data = dataAgendamento.toLocaleDateString();
                    const hora = dataAgendamento.toLocaleTimeString().slice(0, 5);
                
                    const div = document.createElement('div');
                    div.className = 'col';
                    div.innerHTML = `
                        <div class="agendamento-card ${agendamento.status} h-100">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="mb-0">Consulta com ${agendamento.nomeMedico}</h5>
                                <span class="status-badge status-${agendamento.status}">${agendamento.status}</span>
                            </div>
                            <p class="mb-2">Animal: ${agendamento.nomeAnimal.nome}</p>
                            <p class="mb-2">Especialidade: ${agendamento.especialidade}</p>
                            <p class="mb-2">Data: ${data} às ${hora}</p>
                            ${agendamento.status === 'agendado' ? `
                                <button onclick="cancelarAgendamento('${agendamento._id}')" 
                                        class="btn btn-danger btn-sm mt-auto">
                                    Cancelar Agendamento
                                </button>
                            ` : ''}
                        </div>
                    `;
                    return div;
                }
        
            } catch (error) {
                console.error('Erro ao carregar agendamentos:', error);
                mostrarErro('Erro ao carregar agendamentos. Por favor, recarregue a página.');
            }
        }

        async function cancelarAgendamento(id) {
            if (confirm('Deseja cancelar este agendamento?')) {
                try {
                    const response = await fetch(`/agendamentos/cancelar/${id}`, { method: 'DELETE' });
                    if (!response.ok) throw new Error('Erro ao cancelar');
                    await carregarAgendamentos();
                } catch (error) {
                    alert('Não foi possível cancelar.');
                }
            }
        }
    </script>    
    
</body>
</html>